<?xml version="1.0"?>
<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
<!--
	Copyright 2008 Jens Elkner
-->
<service_bundle type='manifest' name='ECSpooler'>
<service
	name='application/ec/backend'
	type='service'
	version='1'>

	<instance name='erlang' enabled='false'>
		<!--
			Wait for network interfaces to be initialized.
		-->
		<dependency name='network'
			grouping='require_all'
			restart_on='error'
			type='service'>
			<service_fmri value='svc:/milestone/network:default'/>
		</dependency>
		
		<!--
			Wait for all local filesystems to be mounted.
		-->
		<dependency name='filesystem-local'
			grouping='require_all'
			restart_on='none'
			type='service'>
			<service_fmri value='svc:/system/filesystem/local:default'/>
		</dependency>

		<!-- if the spooler is running on another host, coment this out -->
		<dependency name='spooler'
			grouping='require_all'
			restart_on='restart'
			type='service'>
			<service_fmri value='svc:/application/ec/spooler:default'/>
		</dependency>

		<exec_method
			type='method'
			name='start'
			exec='%{spooler/basedir}/bin/backendctl -t %{be/tmpdir} -L %{be/logdir} -v %{be/vardir} -w %{be/workdir} -l %{be/loglevel} -H %{be/sphost} -P %{be/spport} -T %{be/trace} -i %{be/interpreter} -c %{be/compiler} -b %{be/host} -B %{be/port} -u %{be/user} -a %{be/authfile} Erlang start'
			timeout_seconds='60'>
			<method_context>
				<method_credential user='ecsbd' group='ecsbd' privileges='basic,!proc_session,!proc_info,!file_link_any'/>
				<method_environment>
					<envvar name='PATH' value='/local/usr/bin:/usr/bin'/>
					<envvar name='ERL_HOME' value='/local/usr/lib/erlang/erts-5.5.4/'/>
				</method_environment>
			</method_context>
		</exec_method>

		<exec_method
			type='method'
			name='stop'
			exec='kill:'
			timeout_seconds='60' />

		<property_group name='port' type='application'>
			<stability value='Evolving' />
			<!-- backend parameter -->
			<propval name='port' type='integer' value='5060'/>
			<propval name='host' type='host' value='localhost'/>
			<!-- spooler parameter: enable, if it runs on a remote host -->
            <propval name='user' type='astring' value='demo'/>
            <propval name='authfile' type='astring' value='/etc/ecsbd'/>
			<!--
			<propval name='spport' type='integer' value='5050'/>
            <propval name='sphost' type='host' value='localhost'/>
			-->
            <propval name='tmpdir' type='astring' value='default'/>
            <propval name='logdir' type='astring' value='default'/>
            <propval name='vardir' type='astring' value='default'/>
            <propval name='workdir' type='astring' value='default'/>
            <propval name='loglevel' type='astring' value='INFO'/>
			<propval name='port' type='integer' value='5060'/>
			<propval name='port' type='integer' value='5060'/>
			<propval name='port' type='integer' value='5060'/>
			<propval name='port' type='integer' value='5060'/>
		</property_group>

		<property_group name='startd' type='framework'>
			<!-- sub-process core dumps shouldn't restart session -->
			<propval name='ignore_error' type='astring' value='core,signal' />
		</property_group>

		<!--
			Add all users, which should be able to manage this service
			into /etc/user_attr or use appropriate profiles. E.g.:
			echo 'jdoe::::auths=solaris.smf.manage.ecs' >>/etc/user_att
		-->
		<property_group name='general' type='framework'>
			<propval name='action_authorization' type='astring'
				value='solaris.smf.manage.ecs' />
		</property_group>
	</instance>

	<stability value='Evolving' />

	<template>
		<common_name>
			<loctext xml:lang='C'>EC Backend for Haskell</loctext>
		</common_name>
		<description>
			<loctext xml:lang='C'>
This EC backend provides syntax checking and testing for Haskell using Hugs 98.
			</loctext>
		</description>
		<documentation>
			<doc_link name='wdok.cs'
				uri='http://wdok.cs.uni-magdeburg.de/forschung/projekte/educomponents/software/ecspooler' />
		</documentation>
	</template>
</service>

</service_bundle>
